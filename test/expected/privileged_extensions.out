-- non-superuser extensions role
create role extensions_role login;
grant all on database postgres to extensions_role;
alter default privileges for role postgres in schema public grant all on tables to extensions_role;
set role extensions_role;
\echo

-- can create a privileged extension
create extension hstore;
select '1=>2'::hstore;
  hstore  
----------
 "1"=>"2"
(1 row)

drop extension hstore;
\echo

-- per-extension custom scripts are run
select * from t2;
 column1 
---------
       1
(1 row)

reset role;
drop table t2;
set role extensions_role;
\echo

-- global extension custom scripts are run
create extension pg_tle;
reset role;
-- must run this after `create extension pg_tle` since the role only exists
-- after the ext is created
grant pgtle_admin to extensions_role;
set role extensions_role;
select pgtle.install_extension('foo', '1', '', 'select 1', '{}');
 install_extension 
-------------------
 t
(1 row)

create extension foo cascade;
NOTICE:  extname: foo, extschema: <NULL>, extversion: <NULL>, extcascade: t
drop extension pg_tle cascade;
NOTICE:  drop cascades to 3 other objects
DETAIL:  drop cascades to function pgtle."foo.control"()
drop cascades to function pgtle."foo--1.sql"()
drop cascades to extension foo
\echo

-- custom scripts are run even for superusers
reset role;
create extension hstore;
drop extension hstore;
select * from t2;
 column1 
---------
       1
(1 row)

drop table t2;
set role extensions_role;
\echo

-- cannot create other extensions
create extension file_fdw;
ERROR:  permission denied to create extension "file_fdw"
HINT:  Must be superuser to create this extension.
\echo

-- original role is restored on nested switch_to_superuser()
create extension autoinc;
select current_role;
  current_role   
-----------------
 extensions_role
(1 row)

\echo

-- can force pg_cron to be installed in pg_catalog
create extension pg_cron schema public;
select extnamespace::regnamespace from pg_extension where extname = 'pg_cron';
 extnamespace 
--------------
 pg_catalog
(1 row)

drop extension pg_cron;
\echo

-- switch to privileged_extensions_superuser even if superuser
reset role;
create role another_superuser superuser;
set role another_superuser;
create extension pg_cron;
select extowner::regrole from pg_extension where extname = 'pg_cron';
 extowner 
----------
 postgres
(1 row)

reset role;
drop extension pg_cron;
drop role another_superuser;
set role extensions_role;
\echo

